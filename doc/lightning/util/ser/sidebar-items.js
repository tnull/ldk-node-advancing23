window.SIDEBAR_ITEMS = {"constant":[["MAX_BUF_SIZE","serialization buffer size"]],"struct":[["BigSize","Lightning TLV uses a custom variable-length integer called `BigSize`. It is similar to Bitcoin’s variable-length integers except that it is serialized in big-endian instead of little-endian."],["FixedLengthReader","Essentially [`std::io::Take`] but a bit simpler and with a method to walk the underlying stream forward to ensure we always consume exactly the fixed length specified."],["Hostname","Represents a hostname for serialization purposes. Only the character set and length will be validated. The character set consists of ASCII alphanumeric characters, hyphens, and periods. Its length is guaranteed to be representable by a single byte. This serialization is used by `BOLT 7` hostnames."],["LengthCalculatingWriter","Writer that only tracks the amount of data written - useful if you need to calculate the length of some data when serialized but don’t yet need the full data."],["OptionDeserWrapper","Wrapper to read a required (non-optional) TLV record."],["ReadTrackingReader","A [`Read`] implementation which tracks whether any bytes have been read at all. This allows us to distinguish between “EOF reached before we started” and “EOF reached mid-read”."],["WithoutLength","A type for variable-length values within TLV record where the length is encoded as part of the record. Used to prevent encoding the length twice."]],"trait":[["MaybeReadable","A trait that various LDK types implement allowing them to (maybe) be read in from a [`Read`]."],["Readable","A trait that various LDK types implement allowing them to be read in from a [`Read`]."],["ReadableArgs","A trait that various higher-level LDK types implement allowing them to be read in from a [`Read`] given some additional set of arguments which is required to deserialize."],["Writeable","A trait that various LDK types implement allowing them to be written out to a [`Writer`]."],["Writer","A simplified version of [`std::io::Write`] that exists largely for backwards compatibility. An impl is provided for any type that also impls [`std::io::Write`]."]]};