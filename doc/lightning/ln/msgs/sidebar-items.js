window.SIDEBAR_ITEMS = {"enum":[["DecodeError","An error in decoding a message or struct."],["ErrorAction","Used to put an error message in a [`LightningError`]."],["NetAddress","An address which can be used to connect to a remote peer."],["OptionalField","Messages could have optional fields to use with extended features As we wish to serialize these differently from `Option<T>`s (`Options` get a tag byte, but [`OptionalField`] simply gets `Present` if there are enough bytes to read into it), we have a separate enum type for them."],["UnsignedGossipMessage","Represents the set of gossip messages that require a signature from a nodeâ€™s identity key."]],"struct":[["AcceptChannel","An `accept_channel` message to be sent to or received from a peer."],["AnnouncementSignatures","An `announcement_signatures` message to be sent to or received from a peer."],["ChannelAnnouncement","A `channel_announcement` message to be sent to or received from a peer."],["ChannelReady","A `channel_ready` message to be sent to or received from a peer."],["ChannelReestablish","A `channel_reestablish` message to be sent to or received from a peer."],["ChannelUpdate","A `channel_update` message to be sent to or received from a peer."],["ClosingSigned","A `closing_signed` message to be sent to or received from a peer."],["ClosingSignedFeeRange","The minimum and maximum fees which the sender is willing to place on the closing transaction."],["CommitmentSigned","A `commitment_signed` message to be sent to or received from a peer."],["CommitmentUpdate","Struct used to return values from [`RevokeAndACK`] messages, containing a bunch of commitment transaction updates if they were pending."],["DataLossProtect","Proof that the sender knows the per-commitment secret of the previous commitment transaction."],["ErrorMessage","An `error` message to be sent to or received from a peer."],["FundingCreated","A `funding_created` message to be sent to or received from a peer."],["FundingSigned","A `funding_signed` message to be sent to or received from a peer."],["GossipTimestampFilter","A `gossip_timestamp_filter` message is used by a node to request gossip relay for messages in the requested time range when the `gossip_queries` feature has been negotiated."],["Init","An `init` message to be sent to or received from a peer."],["LightningError","An Err type for failure to process messages."],["NodeAnnouncement","A `node_announcement` message to be sent to or received from a peer."],["OnionMessage","An onion message to be sent to or received from a peer."],["OpenChannel","An `open_channel` message to be sent to or received from a peer."],["Ping","A `ping` message to be sent to or received from a peer."],["Pong","A `pong` message to be sent to or received from a peer."],["QueryChannelRange","A `query_channel_range` message is used to query a peer for channel UTXOs in a range of blocks. The recipient of a query makes a best effort to reply to the query using one or more [`ReplyChannelRange`] messages."],["QueryShortChannelIds","A `query_short_channel_ids` message is used to query a peer for routing gossip messages related to one or more `short_channel_id`s."],["ReplyChannelRange","A `reply_channel_range` message is a reply to a [`QueryChannelRange`] message."],["ReplyShortChannelIdsEnd","A `reply_short_channel_ids_end` message is sent as a reply to a message. The query recipient makes a best effort to respond based on their local network view which may not be a perfect view of the network."],["RevokeAndACK","A `revoke_and_ack` message to be sent to or received from a peer."],["Shutdown","A `shutdown` message to be sent to or received from a peer."],["UnsignedChannelAnnouncement","The unsigned part of a `channel_announcement` message."],["UnsignedChannelUpdate","The unsigned part of a `channel_update` message."],["UnsignedNodeAnnouncement","The unsigned part of a `node_announcement` message."],["UpdateAddHTLC","An `update_add_htlc` message to be sent to or received from a peer."],["UpdateFailHTLC","An `update_fail_htlc` message to be sent to or received from a peer."],["UpdateFailMalformedHTLC","An `update_fail_malformed_htlc` message to be sent to or received from a peer."],["UpdateFee","An `update_fee` message to be sent to or received from a peer"],["UpdateFulfillHTLC","An `update_fulfill_htlc` message to be sent to or received from a peer."],["WarningMessage","A `warning` message to be sent to or received from a peer."]],"trait":[["ChannelMessageHandler","A trait to describe an object which can receive channel messages."],["OnionMessageHandler","A trait to describe an object that can receive onion messages."],["RoutingMessageHandler","A trait to describe an object which can receive routing messages."]]};