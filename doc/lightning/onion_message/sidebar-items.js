window.SIDEBAR_ITEMS = {"enum":[["Destination","The destination of an onion message."],["OnionMessageContents","The contents of an onion message. In the context of offers, this would be the invoice, invoice request, or invoice error."],["SendError","Errors that may occur when sending an onion message."]],"struct":[["BlindedHop","Used to construct the blinded hops portion of a blinded path. These hops cannot be identified by outside observers and thus can be used to hide the identity of the recipient."],["BlindedPath","Onion messages can be sent and received to blinded paths, which serve to hide the identity of the recipient."],["OnionMessenger","A sender, receiver and forwarder of onion messages. In upcoming releases, this object will be used to retrieve invoices and fulfill invoice requests from offers. Currently, only sending and receiving custom onion messages is supported."]],"trait":[["CustomOnionMessageContents","The contents of a custom onion message."],["CustomOnionMessageHandler","Handler for custom onion messages. If you are using [`SimpleArcOnionMessenger`], [`SimpleRefOnionMessenger`], or prefer to ignore inbound custom onion messages, `IgnoringMessageHandler` must be provided to [`OnionMessenger::new`]. Otherwise, a custom implementation of this trait must be provided, with `CustomMessage` specifying the supported message types."]],"type":[["SimpleArcOnionMessenger","Useful for simplifying the parameters of `SimpleArcChannelManager` and `SimpleArcPeerManager`. See their docs for more details."],["SimpleRefOnionMessenger","Useful for simplifying the parameters of `SimpleRefChannelManager` and `SimpleRefPeerManager`. See their docs for more details."]]};